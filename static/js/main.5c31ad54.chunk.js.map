{"version":3,"sources":["components/errorMessage/error.jpeg","serviceWorker.js","services/service.js","components/errorMessage/index.js","components/errorMessage/errorMessage.js","components/spinner/index.js","components/spinner/spiner.js","components/app/app.js","components/app/index.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Service","getResource","url","a","async","fetch","_apiBase","res","ok","Error","status","json","getBalance","this","ErrorMessage","src","img","alt","Spinner","className","App","newService","useState","initialBalance","setInitialBalance","balance","setBalance","error","setError","loading","setLoading","percentRange","setProgress","useEffect","setTimeout","Math","round","balance_usd","then","catch","reason","errorMessage","spinner","content","View","classNames","btnClass","id","style","width","textAlign","fontSize","aria-hidden","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,oC,4LCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0CClBeC,EACnB,aAAe,IAAD,gCAIdC,YAAc,SAAOC,GAAP,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACME,MAAM,GAAD,OAAI,EAAKC,UAAT,OAAoBJ,KAD/B,WACNK,EADM,QAGHC,GAHG,sBAIJ,IAAIC,MAAM,0BAAmBP,GAAnB,qBACAK,EAAIG,SALV,yBAAAP,EAAA,MAOCI,EAAII,QAPL,8EAJA,KAedC,WAAa,oBAAAT,EAAAC,OAAA,kEAAAD,EAAA,MACE,EAAKF,YAAL,aADF,8EAdXY,KAAKP,SAAW,sC,wBCDLQ,ECIM,WACnB,OACE,oCACE,yBAAKC,IAAKC,IAAKC,IAAI,YCPVC,G,MCEC,WACd,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,eACb,8BACA,8BACA,kCCuDOC,MAzDf,WAEE,IAAMC,EAAa,IAAIrB,EAFV,EAG+BsB,mBAAS,GAHxC,mBAGNC,EAHM,KAGUC,EAHV,OAIiBF,mBAAS,GAJ1B,mBAING,EAJM,KAIGC,EAJH,OAKaJ,oBAAS,GALtB,mBAKNK,EALM,KAKCC,EALD,OAMiBN,oBAAS,GAN1B,mBAMNO,EANM,KAMGC,EANH,OAOuBR,mBAAS,GAPhC,mBAONS,EAPM,KAOQC,EAPR,KASbC,qBAAU,WASJF,EAAe,KACjBG,YATqB,WACrBF,EAAYD,EAAgB,IAAM,IAClCP,EAAkBW,KAAKC,MAA6B,KAAtBb,EAAiB,IAAY,KACvDA,GAAkBE,EAAQY,cAC5Bb,EAAkBW,KAAKC,MAA+B,KAAxBb,EAAiB,KAAc,KAC7DS,EAAYD,EAAe,QAIDR,EAAiBE,EAAQY,YAAe,IAAO,KAM7EhB,EAAWT,aACR0B,MAAK,SAAA/B,GACJmB,EAAWnB,GACXqB,GAAS,GACTE,GAAW,MAEZS,OAAM,SAAAC,GACLZ,GAAS,GACTE,GAAW,QAXd,CAACC,EAAcR,IAelB,IAAMkB,EAAed,EAAQ,kBAAC,EAAD,MAAkB,KACzCe,EAAUb,EAAU,kBAAC,EAAD,MAAa,KACjCc,EAAad,GAAWF,EAIE,KAJO,kBAAC,EAAD,CACrCF,QAASA,EACTF,eAAgBA,EAChBQ,aAAcA,EACdC,YAAaA,IAGf,OACE,yBAAKb,UAAU,OACb,4BAAQA,UAAU,cACfsB,EACAC,EACAC,KAQHC,EAAO,SAAC,GAAoC,IAAnCrB,EAAkC,EAAlCA,eAAgBQ,EAAkB,EAAlBA,aAEzBc,EAAa,OACbC,EAAW,aAMf,OAJuB,KAAnBvB,IACFsB,EAAa,YACbC,GAAY,UAGZ,oCACE,sCACA,yBAAKC,GAAG,UACN,4BAAQ5B,UAAU,UAAS,sDAC3B,yBAAKA,UAAU,UACb,yBAAKA,UAAU,gBACb,uCAAY,0BAAMA,UAAU,gBAAe,yBAAKA,UAAU,QAAQ6B,MAAO,CAACC,MAAM,GAAD,OAAKlB,EAAL,QAC7E,yBAAKZ,UAAU,cAAc6B,MAAO,CAACC,MAAM,GAAD,OAAKlB,EAAL,KAAsBmB,UAAW,MAAOC,SAAU,SACxF,uBAAGhC,UAAU,iBAAiBiC,cAAY,SAC5C,iCAAO7B,MAIX,yBAAKJ,UAAW2B,GACd,gCACE,sCAEF,sCAGJ,yBAAK3B,UAAW0B,GAAY,uBAAG1B,UAAU,oBAAoBiC,cAAY,SAAzE,8CC9FKhC,ICIfiC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SR6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.5c31ad54.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/error.12e40dd1.jpeg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default class Service {\r\n  constructor() {\r\n    this._apiBase = 'http://alex.devel.softservice.org/'\r\n  }\r\n\r\n  getResource = async (url) => {\r\n    const res = await fetch(`${this._apiBase}${url}`);\r\n\r\n    if (!res.ok) {\r\n      throw new Error(`Could not fetch ${url}` +\r\n        `, received ${res.status}`);\r\n    }\r\n    return await res.json();\r\n  };\r\n\r\n\r\n  getBalance = async () => {\r\n   return  await this.getResource(`testapi/`);\r\n  };\r\n\r\n}\r\n","import ErrorMessage from \"./errorMessage\";\r\nexport default ErrorMessage;","import React from 'react';\r\nimport './errorMessage.css';\r\n\r\nimport img from './error.jpeg'\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <>\r\n      <img src={img} alt=\"error\"/>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default ErrorMessage;","import Spinner from \"./spiner\";\r\nexport default Spinner;","import React from 'react';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () =>{\r\n  return(\r\n    <div className=\"lds-css ng-scope\">\r\n      <div className=\"lds-spinner\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Spinner;","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\n\r\nimport Service from \"../../services/service\";\r\nimport ErrorMessage from \"../errorMessage\";\r\nimport Spinner from \"../spinner\";\r\n\r\nfunction App() {\r\n\r\n  const newService = new Service();\r\n  const [initialBalance, setInitialBalance] = useState(0);\r\n  const [balance, setBalance] = useState(0);\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [percentRange, setProgress] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const updateProgress = () => {\r\n      setProgress(percentRange + (100 / 15));\r\n      setInitialBalance(Math.round((initialBalance + 1) * 100) / 100);\r\n      if (initialBalance >= balance.balance_usd) {\r\n        setInitialBalance(Math.round((initialBalance + 0.2) * 100) / 100);\r\n        setProgress(percentRange + 1.5);\r\n      }\r\n    };\r\n    if (percentRange < 100) {\r\n      setTimeout(updateProgress, (initialBalance > balance.balance_usd) ? 2000 : 500)\r\n    }\r\n    loadedBalance();\r\n  }, [percentRange, initialBalance]);\r\n\r\n  function loadedBalance() {\r\n    newService.getBalance()\r\n      .then(res => {\r\n        setBalance(res);\r\n        setError(false);\r\n        setLoading(false);\r\n      })\r\n      .catch(reason => {\r\n        setError(true);\r\n        setLoading(false)\r\n      })\r\n  }\r\n\r\n  const errorMessage = error ? <ErrorMessage/> : null;\r\n  const spinner = loading ? <Spinner/> : null;\r\n  const content  = !(loading || error) ? <View\r\n    balance={balance}\r\n    initialBalance={initialBalance}\r\n    percentRange={percentRange}\r\n    setProgress={setProgress}/> : null;\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {errorMessage}\r\n        {spinner}\r\n        {content}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nconst View = ({initialBalance, percentRange}) => {\r\n\r\n  let classNames = 'more';\r\n  let btnClass = 'target_btn';\r\n\r\n  if (initialBalance === 15) {\r\n    classNames = 'more_none';\r\n    btnClass += ' color'\r\n  }\r\n  return (\r\n    <>\r\n      <h4>Scrile</h4>\r\n      <div id='target'>\r\n        <header className=\"header\"><h4>Target indicator Demo</h4></header>\r\n        <div className=\"inside\">\r\n          <div className=\"inside_block\">\r\n            <p>Reached: <span className=\"progress-bar\"><div className=\"range\" style={{width: `${percentRange}%`}}/>\r\n              <div className=\"range_money\" style={{width: `${percentRange}%`, textAlign: 'end', fontSize: '13px'}}>\r\n                  <i className=\"fa fa-sort-asc\" aria-hidden=\"true\"/>\r\n                <div>${initialBalance}</div>\r\n              </div>\r\n            </span>\r\n            </p>\r\n            <div className={btnClass}>\r\n              <header>\r\n                <a>Target</a>\r\n              </header>\r\n              <div>$15</div>\r\n            </div>\r\n          </div>\r\n          <div className={classNames}><i className=\"fa fa-info-circle\" aria-hidden=\"true\"/>You need $1 more to reach\r\n            your target.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n};","import App from \"./app\";\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./components/app\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}